#!/usr/bin/env bash
#===============================================================================
#
#  ________  ________  ________  ___  ___  ________ ___    ___ 
# |\   __  \|\   __  \|\   ____\|\  \|\  \|\  _____|\  \  /  /|
# \ \  \|\ /\ \  \|\  \ \  \___|\ \  \\\  \ \  \__/\ \  \/  / /
#  \ \   __  \ \   __  \ \_____  \ \   __  \ \   __\\ \    / / 
#   \ \  \|\  \ \  \ \  \|____|\  \ \  \ \  \ \  \_| /     \/  
#    \ \_______\ \__\ \__\____\_\  \ \__\ \__\ \__\ /  /\   \  
#     \|_______|\|__|\|__|\_________\|__|\|__|\|__|/__/ /\ __\ 
#                        \|_________|              |__|/ \|__| 
#                                                             
#-------------------------------------------------------------------------------
#$ name:bashfx-install
#$ author:qodeninja
#$ autobuild: 00001
#$ date:
#-------------------------------------------------------------------------------


#=====================================code!=====================================

  opt_args=("${@}")

#-------------------------------------------------------------------------------
# CONFIG PARAMS
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# CHECK FOR BASIC DEPENDENCIES
#-------------------------------------------------------------------------------

    opt_quiet=1 #default quiet mode
    opt_debug=1
    opt_yes=1
    opt_local=1
    opt_nuke=1
    opt_clean=1
    opt_run=1
    opt_pipe=1
    opt_silly=1

    _DEPS_LOCAL=(tput printf sed git find sleep);
    _DEPS_MISSING=();

    function command_exists(){
        type "$1" &> /dev/null ;
    }

    function check_deps(){
        local ret=0;
        for dep in "${@}"; do
            if ! command_exists "$dep"; then
                _DEPS_MISSING+=("$dep")
                ret=1
            fi
        done

        return $ret;
    }

#-------------------------------------------------------------------------------
# Term
#-------------------------------------------------------------------------------

    red=$(tput setaf 9)
    green=$(tput setaf 2)
    blue=$(tput setaf 39)
    orange=$(tput setaf 214)
    white=$(tput setaf 248)
    white2=$(tput setaf 15)
    purple=$(tput setaf 213)
    x=$(tput sgr0)
    eol="$(tput el)"
    bld="$(tput bold)"
    tab=$'\t'
    nl=$'\n'
    delta="\xE2\x96\xB3"
    pass="${green}\xE2\x9C\x93"
    fail="${red}\xE2\x9C\x97"
    lambda="\xCE\xBB"
    dots='\xE2\x80\xA6'
    space='\x20'
    line="##---------------$nl"




#-------------------------------------------------------------------------------
# Utils
#-------------------------------------------------------------------------------
  
  function stderr(){ printf "${@}${x}\n" 1>&2; }

  function __printf(){
      local text color prefix
      text=${1:-}; color=${2:-white2}; prefix=${!3:-};
      [ $opt_quiet -eq 1 ] && [ -n "$text" ] && printf "${prefix}${!color}%b${x}" "${text}" 1>&2 || :
  }



  function __sleep(){
      [ $opt_yes -eq 1 ] && sleep 1 || :
  }


  function pass(){ local text=${1:-}; __printf "$pass $text\n" "green"; }
  function error(){ local text=${1:-}; __printf "$fail $text\n" "red"; }
  function silly(){ local text=${1:-}; [ $opt_silly   -eq 0 ] && __printf "$dots $text\n" "purple"; }
  function warn(){ local text=${1:-}; __printf "$delta $text$x\n" "orange";  }
  function info(){ local text=${1:-}; [ $opt_debug -eq 0 ] && __printf "$lambda $text\n" "blue"; }
  function does(){ local text=${1:-}; [ $opt_debug -eq 0 ] && __printf "$delta $text\n" "purple"; }



  function fatal(){ trap - EXIT; __printf "\n$red$fail $1 [$2] \n"; exit 1; }
  function quiet(){ [ -t 1 ] && opt_quiet=${1:-1} || opt_quiet=1; }


  function confirm(){
      local ret;ret=1
      __printf "${1}? > " "white2" #Are you sure ?
      [ $opt_yes -eq 0 ] && __printf "${bld}${green}auto yes${x}\n" && return 0;
      [[ -f ${BASH_SOURCE} ]] && src='/dev/stdin' || src='/dev/tty'

      while read -r -n 1 -s answer < $src; do
          [ $? -eq 1 ] && exit 1;
          if [[ $answer = [YyNn10tf+\-q] ]]; then
               [[ $answer = [Yyt1+] ]] && __printf "${bld}${green}yes${x}" && ret=0 || :
               [[ $answer = [Nnf0\-] ]] && __printf "${bld}${red}no${x}" && ret=1 || :
               [[ $answer = [q] ]] && __printf "\n" && exit 1 || :
              break
          fi
      done
      __printf "\n"
      return $ret
  }


  function prompt(){
    local res ret next __VALUE prompt="$1" prompt_sure="$2" default="$3"
    [[ -f ${BASH_SOURCE} ]] && src='/dev/stdin' || src='/dev/tty'
    while [[ -z "$next" ]]; do
      read -p "${x}$prompt? > ${bld}${green}" __VALUE < $src;
      next=1
      __printf "${x}"
    done
    echo $__VALUE
  }

#-------------------------------------------------------------------------------
# Sig / Flow
#-------------------------------------------------------------------------------


    function handle_interupt(){ E="$?";  kill 0; exit $E; }
    function handle_stop(){ kill -s SIGSTOP $$; }
    function handle_input(){ [ -t 0 ] && stty -echo -icanon time 0 min 0; }
    function cleanup(){ [ -t 0 ] && stty sane; }

    function fin(){
        local E="$?"; cleanup
        if [ -z "$opt_quiet" ]; then
           [ $E -eq 0 ] && __printf "${green}${pass} ${1:-Done}." \
                        || __printf "$red$fail ${1:-${err:-Cancelled}}."
        fi
    }


#-------------------------------------------------------------------------------
# Traps
#-------------------------------------------------------------------------------

    trap handle_interupt INT
    trap handle_stop SIGTSTP
    trap handle_input CONT
    trap fin EXIT


#-------------------------------------------------------------------------------
# FX SUB API
#-------------------------------------------------------------------------------


    function fx_repair_check(){
      if [ $FX_INSTALLED -eq 0 ] && [ ! -z "$FX_PREFIX" ]; then
        msg="FX is already installed, attempt repair"

        [ $opt_clean -eq 0 ] && { FX_PREFIX=; msg="Clean repair with unset prefix";  }

        if confirm "$msg (y/n=cancel)"; then
          info "Repairing..."
          __sleep
          api_clean 0
          [ $opt_quiet -eq 1 ] && clear || :
          api_options "${orig_args[@]}"
        else
          exit 0
        fi
      else
        info "Installing... ($FX_PREFIX)"
        __sleep
      fi
    }

    function fx_prefix_check(){
      if [ -z "$FX_PREFIX" ]; then
        warn "FX_PREFIX not defined."
        if confirm "Install BASHFX for just the current user [$HOME/.this] (y/n)"; then
          FX_PREFIX="$FX_OPT_HOME"
        else
          FX_PREFIX="$FX_OPT_USER"
        fi
      else
        info "BASHFX will set <FX_PREFIX> and install to [ $FX_PREFIX ]\n"
      fi 
    }


    function fx_vars(){
      if [ -n $FX_PREFIX ]; then
        THIS_LIB="$FX_PREFIX/lib"
        THIS_BIN="$FX_PREFIX/bin"
        THIS_ETC="$FX_PREFIX/etc"
        THIS_DATA="$FX_PREFIX/data"
        THIS_SERV="$HOME/.serv"
        FX_CONF_FILE="$FX_ETC/bashfx.conf"
        MATCH_LINE="source \"$FX_CONF_FILE\""
        REGEX_LINE="^[^#]*\b$MATCH_LINE"
        return 1
      fi
      return 0
    }


    function fx_create_dirs(){
      local FX_DIRS=($THIS_LIB $THIS_BIN $THIS_ETC $THIS_DATA $THIS_SERV);
      for this in "${FX_DIRS[@]}"; do
        [ ! -d $this ] && { info "Creating Directory $this..."; mkdir -p $this; } || info "Directory $this already exists";
        if [ ! -w $this ]; then
          fatal "${red}Install directory [$this] is not writeable. Cannot create directories.${x}\n";
        fi
      done
    }


    function fx_rc_file_check(){
      local ret=1;
      if [ -d "$THIS_ETC" ]; then
        FX_CONF_FILE="$THIS_ETC/fx/bashfx.conf"
        #rc_make "$FX_CONF_FILE"
        info 'make rc file here'
      else
        err="Cannot generate rc file!"
      fi

      if [ -f "$FX_CONF_FILE" ]; then
        :
        info 'link profile here'
        #profile_link "$FX_CONF_FILE"
        #rc_dump "$FX_CONF_FILE"
      else
        err="Cannot link rcfile"
        ret=1;
      fi

    }

    function fx_copy_installer(){
      local ret=1 TARGET LINK_DEST

      if [ -d "$THIS_BIN" ] && [ -d "$THIS_LIB" ]; then

        TARGET="$THIS_LIB/fx/fx-install"
        LINK_DEST="$THIS_BIN/fx/fx-install" 

        cp "$BASH_SOURCE" "$TARGET" #copy script to lib
        if [ -f $TARGET ]; then
          if [ ! -L "$LINK_DEST" ]; then
            $(ln -s "$LINK_DEST" "$TARGET"); ret=$?; #link lib=>bin
            [ $ret -eq 1 ] && err="Cannot link installer to $THIS_BIN";
          else
            warn "Installer already linked!"
            ret=0;
          fi
        else
          err="Cannot copy installer (fx-install) to $THIS_LIB"
        fi
      else
        err='Cannot enable installer because bin or lib is missing.'
        ret=1;
      fi
      return $ret

    }



#-------------------------------------------------------------------------------
# FX API
#-------------------------------------------------------------------------------



    function api_nuke(){
        :
    }


    function api_check_deps(){
        if ! check_deps "${_DEPS_LOCAL[@]}"; then
            fatal "Missing dependencies!" "${_DEPS_MISSING[*]}";
            return 1
        else
            unset _DEPS_MISSING _DEPS_LOCAL dep;
            return 0
        fi
    }


    function api_install(){

     local steps=(fx_repair_chec fx_prefix_check fx_vars fx_create_dirs fx_rc_file_check fx_copy_installer)

      for step in "${steps[@]}"; do
        # Call the function and capture its return value
        "$step"
        local step_status=$?

        # Check the status of the step
        if [ $step_status -eq 0 ]; then
          info "Step ($step) completed successfully."
        else [ $step_status -eq 1 ]; then
          warn "Step ($step) was not executed."
        fi

        if [ -n "$err" ];
          # Handle the fatal error condition
          error "Step ($step) encountered a fatal error. ($err)"
          break
        fi

      done

      if [ -n "$err" ]; then 
        [ $opt_nuke -eq 0 ] && { msg="The installation has failed with nuke mode enabled. All files stored in $FX_PREFIX will be lost. Continue? ";  }
        if confirm "$msg (y/n=cancel)"; then
          api_nuke()
        else
          fatal "Installation failed." "$err"
        fi

      fi

    }

#-------------------------------------------------------------------------------
# FX Main
#-------------------------------------------------------------------------------


    function api_options(){


        for arg in "${@}"; do
            case "$arg" in
                --quiet|-q)
                    opt_quiet=0
                    opt_yes=0
                    opt_silly=1
                    opt_debug=1
                    info "quiet_mode"
                    info "auto_yes"
                    ;;
                --silly)
                    opt_silly=0
                    opt_debug=0
                    info "silly_mode"
                    ;;
                --pipe|-P)
                    opt_pipe=0
                    info "pipe_simulation"
                    ;;
                --debug|-v)
                    opt_debug=0
                    info "debug_mode"
                    ;;
                --system)
                    opt_local=0
                    FX_PREFIX="/opt/fx/this"
                    info "system_install"
                    ;;
                --local)
                    opt_local=1
                    FX_PREFIX="$HOME/.this"
                    info "local_install"
                    ;;
                --nuke)
                    opt_nuke=0
                    ;;
                --clean|-C)
                    opt_clean=0
                    ;;
                --run|-X)
                    opt_run=0
                    info "do_run"
                    ;;
                --yes|-Y)
                    opt_yes=0
                    info "auto_yes"
                    ;;
            esac
        done

    }



    function dispatch(){
      does "try dispatch"
      local call="$1" arg= path= cmd_str= ret;
      case $call in
        help)    cmd="usage";; #doesnt work on mac
        inst*)   cmd="api_install";;
        unin*)   cmd="api_uninstall";;
        dl)      cmd="api_download";;
        nuke)    cmd="api_nuke";;
        *)
          if [ ! -z "$call" ]; then
            die "Invalid command $call";
            ret 1;
          fi
        ;;
      esac

      does "$cmd"
      $cmd;ret=$?;
      [ -n "$err" ] && return 1;
      return $ret;

    }


    function main(){
      local ret args=("${@}")
      dispatch "$@"; ret=$?;
      [ -n "$err" ] && fatal "$err" || stderr "$out";
      return $ret
    }

#-------------------------------------------------------------------------------
# FX Driver
#-------------------------------------------------------------------------------


    if [ "$0" = "-bash" ]; then
        :
    else

        if api_check_deps; then 

            api_options "${opt_args[@]}"

            if [ ! -t 0 ]; then opt_pipe=0; fi;

            if [ $opt_pipe -eq 0 ]; then

                silly "piped run detected."

                if [ $opt_run -eq 1 ]; then
                    warn "You must opt-in to auto run the script with --run in pipe mode."
                fi
                
            else
              silly "normal run detected"
            fi


            args=( "${opt_args[@]/\-*}" ); #delete anything that looks like an option
            main "${args[@]}";ret=$?


        fi

    fi




#=====================================!code=====================================





#====================================doc:help!==================================
#
#  \n\t${b}fx-install --option [<n>ame] [<p>ath]${x}
#
#  \t${o}home: $FX${x}
#  \t${o}size: ($count)${x}
#  \t${w}Commands:${x}
#
#  \t${b}--quiet
#  \t${b}--debug
#  \t${b}--system
#  \t${b}--local
#  \t${b}--nuke
#  \t${b}--clean  : 
#  \t${b}--yes    : respond yes to all prompts
#
#=================================!doc:help=====================================
